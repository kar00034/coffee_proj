[name]
database_name = coffee

[user]
user_sql = GRANT all on coffee.* TO 'user_coffee'@'localhost' IDENTIFIED BY 'rootroot'

[sql]
product = create table product(
    code char(4) not null,
    name varchar(20) null,
    primary key (code))

sale = create table sale(
    no int auto_increment,
    code char(4) not null,
    price int not null,
    saleCnt int not null,
    marginRate int not null,
    primary key(no),
    foreign key (code) references product(code))

sale_detail = create table sale_detail(
    no int not null,
    sale_price int not null,
    addTax int not null,
    supply_price int not null,
    margin_Price int not null,
    foreign key (no) references sale (no)
    on delete cascade)

tri_sale_after_insert_detail =
    create trigger tri_sale_insert_after_detail
    after insert on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,	@addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * (new.marginrate/100));
        insert into sale_detail(no, sale_price, addtax, supply_price, margin_price)
        values(new.no, @saleprice, @addtax, @supprice, @marprice);
    end

tri_sale_after_update_detail =
    create trigger tri_sale_after_update_detail
    after update on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * (new.marginrate/100));

        update coffee.sale_detail
        set sale_price=@saleprice, addtax=@addtax, supply_price=@supprice, margin_price=@marprice
        where no = new.no;
    end

proc_saledetail_orderby =
    create procedure proc_saledetail_orderby(in issaleprice boolean)
    BEGIN
        if issaleprice then
            select s3.rank, s3.code, s3.name, s3.price, s3.saleCnt, s3.sale_price, s3.addTax, s3.supply_price, s3.marginRate, s3.margin_price
            from (select (select count(*)+1 from sale_detail s2 where s2.sale_price > s1.sale_price) rank, sale.code code, p.name name, price, saleCnt, sale_price, addTax, supply_price, marginRate, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code
            order by rank) s3
            UNION
            select '합계', '-', '-', sum(s4.price), sum(s4.salecnt), sum(s4.sale_price), sum(s4.addTax), sum(s4.supply_price), '-', sum(s4.margin_price)
            from (select price, saleCnt, sale_price, addTax, supply_price, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code) s4;
        else
            select s3.rank, s3.code, s3.name, s3.price, s3.saleCnt, s3.sale_price, s3.addTax, s3.supply_price, s3.marginRate, s3.margin_price
            from (select (select count(*)+1 from sale_detail s2 where s2.margin_price > s1.margin_price) rank, sale.code code, p.name name, price, saleCnt, sale_price, addTax, supply_price, marginRate, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code
            order by rank) s3
            UNION
            select '합계', '-', '-', sum(s4.price), sum(s4.salecnt), sum(s4.sale_price), sum(s4.addTax), sum(s4.supply_price), '-', sum(s4.margin_price)
            from (select price, saleCnt, sale_price, addTax, supply_price, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code) s4;
         end if;
    end

